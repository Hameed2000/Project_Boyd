@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.AspNetCore.WebUtilities;
@using ProjectBoyd.Models;
@using ProjectBoyd.Models.ObjectModels;
@using ProjectBoyd.Models.EntityModels;
@using ProjectBoyd.Data;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;

@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@inject RoleManager<IdentityRole> roleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@*@inject ApplicationDbContext dbContext*@
@inject IDbContextFactory<ApplicationDbContext> dbFactory
@implements IAsyncDisposable

@* To-Do: Create a page model for it *@

@if (instructorList != null) {

    <div id="body-main">

        <!-- MODALS GO HERE-->
        <div id="session-page-modal-container" class="basic-modal-container">

            @if (session != null && session.sessionEntity.Active) {

                <div id="student-list-modal" class="basic-modal-item">

                    <div class="list-flex" style="width:100%;">

                        <!-- close button -->

                        <button id="student-list-modal-close" class="icon-button" @onclick="HideStudentList" style="position: absolute; top: 0px; right: 0px; padding:5px;" type="button">
                            <span class="material-icons" style="margin:auto;font-size:25px">close</span>
                        </button>

                        <div class="default-text title" style="margin-bottom:15px">Students</div>

                        <div id="active-session-instructor-list" class="rounded-visible-border" style="width:100%; padding:10px; box-sizing: border-box; border: none">

                            @foreach (var studentEnt in session.GetStudents(dbFactory.CreateDbContext())) {

                                <div class="form-instructor-entry centering-flex">

                                    <div class="default-text" style="text-align: left;padding:5px;font-size:inherit">@studentEnt.FirstName @studentEnt.LastName</div>
                                    <div class="flex-divider"></div>

                                </div>

                            }

                        </div>

                    </div>

                </div>

            }
            else if (session == null) {

                <div id="add-instructor-modal" class="basic-modal-item">

                    <div class="list-flex" style="width:100%;">

                        <!-- close button -->

                        <button id="add-instructor-modal-close" class="icon-button" @onclick="HideInstructorModal" style="position: absolute; top: 0px; right: 0px; padding:5px;" type="button">
                            <span class="material-icons" style="margin:auto;font-size:25px">close</span>
                        </button>

                        <div class="default-text title" style="margin-bottom:15px">Select an Instructor</div>

                        <div id="active-session-instructor-list" class="rounded-visible-border" style="width:100%; padding:10px; box-sizing: border-box; border: none">

                            @foreach (var instructorItem in instructorElementList) {

                                @if (instructorItem.user != currentUser) {

                                    <button class="form-instructor-entry centering-flex rounded-button" @onclick="() => instructorItem.clicked(instructorElementList, instructorElementSelectedList)">

                                        <div class="default-text" style="text-align: left;padding:5px;font-size:inherit"> @instructorItem.user.UserName </div>

                                        <div class="flex-divider"></div>

                                        <span class="material-icons" style="margin:auto;font-size:25px;padding:5px">@instructorItem.radioButton</span>

                                    </button>

                                }

                            }


                        </div>

                    </div>

                </div>

            }

        </div>


        <div class="nav-bar">
            <button id="menu-toggle" class="icon-button" style="height:55px;width:55px;margin-left:15px;display:none;">
                <span class="material-icons" style="margin:auto;font-size:30px">menu</span>
            </button>

            <div class="flex-divider"></div>

        </div>

        <!-- PAGE CONTENT GOES HERE -->

        <div class="session-generator-content">

            @if (session == null) {

                <div id="create-session-content" class="session-generator-item active">

                    <div class="rounded-visible-border">

                        <div class="default-text title">Create Session</div>

                        <!-- I change this a div, was a form previously -->
                        <div class="centering-flex" id="create-session-form" target="" action="" method="" name="createSessionForm" style="flex-direction: column;">

                            <div>
                                <!-- SESSION NAME INPUT FIELD -->
                                <div class="default-text form-title">Session Name</div>

                                <input id="sessionName" placeholder="Session Name" name="sessionName" type="text" required="" @bind="SessionName">

                                <div id="session-name-error" class="default-text form-error"></div>

                            </div>

                            <div>
                                <!-- INSTRUCTOR INPUT FIELD -->
                                <div class="centering-flex" style="margin-bottom:5px">

                                    <div class="default-text form-title">Instructors</div>

                                    <div class="flex-divider"></div>

                                    <button type="button" id="form-add-instructor" class="icon-button remove-instructor" @onclick="ShowInstructorModal" style="height:auto;width:auto;padding:5px;" title="Add Instructor">
                                        <span class="material-icons" style="margin:auto;font-size:25px">person_add</span>
                                    </button>

                                </div>

                                <input id="form-instructor-list" name="instructor-list" type="text" hidden="">

                                <div id="form-visible-instructor-list" class="rounded-visible-border" style="padding:10px; box-sizing: border-box;">

                                    @foreach (var instructorItem in instructorElementSelectedList) {

                                        <div class="form-instructor-entry centering-flex">

                                            <span class="material-icons default-text noselect" style="display: none;margin:auto;font-size:25px;padding:5px" title="You">account_box</span>

                                            <div class="default-text" style="text-align:left;padding:5px;font-size:1.1em;display:block"> @instructorItem.user.UserName </div>

                                            <div class="flex-divider"></div>

                                            <button class="icon-button remove-instructor" @onclick="() => instructorItem.clicked(instructorElementList, instructorElementSelectedList)" style="height:auto;width:auto;padding:5px;" title="Remove" type="button">
                                                <span class="material-icons" style="margin:auto;font-size:25px">delete_outline</span>
                                            </button>

                                        </div>

                                    }

                                </div>

                                <div class="default-text form-error"></div>

                            </div>


                            <div>

                                <button id="create-session-button" class="noselect" @onclick="CreateSession" style="background-color: var(--accent-color); color: #fff;">Create Session</button>
                                <!--<input id="create-session-button" class="noselect" type="submit" value="Create Session" style="background-color: var(--accent-color); color: #fff;">-->

                            </div>

                        </div>

                    </div>


                </div>

            }
            else if (session != null && session.sessionEntity.Active) {

                <div id="active-session-content" class="session-generator-item active">
                    <div class="rounded-visible-border">

                        <div class="default-text title">@SessionName</div>

                        <div class="active-session-list">

                            <div>

                                <div class="default-text form-title">Join Code</div>

                                <button title="Copy Join Code" id="active-session-joinCode" class="rounded-button active-session-entry centering-flex" @onclick="CopySessionCode" style="background-color: var(--accent-color);color: #fff">

                                    @*copy to clipboard*@
                                    <code @ref="_sessionJoinCode">
                                        <div class="default-text" id="join-session-code">@JoinCode</div>
                                    </code> 

                                    <div class="flex-divider"></div>

                                    <span class="material-icons" style="margin:auto;font-size:25px;padding:5px">content_copy</span>

                                </button>

                            </div>

                            <div>

                                <div class="default-text form-title">Students</div>

                                <button title="Open" id="active-session-students-button" class="rounded-button centering-flex active-session-entry" @onclick="ShowStudentList">

                                    <div class="default-text">@session.StudentCount(dbContext) Students</div>

                                    <div class="flex-divider"></div>

                                    <span class="material-icons" style="margin:auto;font-size:25px;padding:5px">open_in_new</span>

                                </button>

                            </div>

                            <div>

                                <div class="default-text form-title">Instructors</div>

                                <div id="active-session-instructor-list" class="rounded-visible-border" style="padding:10px; box-sizing: border-box;">

                                    @foreach (var element in instructorElementSelectedList) {

                                        <div class="form-instructor-entry centering-flex">

                                            <span class="material-icons default-text noselect" style="display: none;margin:auto;font-size:25px;padding:5px" title="You">account_box</span>

                                            <div class="default-text" style="text-align: left;padding:5px;font-size:inherit">@element.user.UserName</div>

                                            <div class="flex-divider"></div>

                                        </div>

                                    }

                                </div>

                            </div>

                            <div>

                                <div class="default-text form-title">Created</div>

                                <div id="active-session-createdDate" class="rounded-button active-session-entry centering-flex">

                                    <div class="default-text">@Created</div>

                                    <div class="flex-divider"></div>

                                </div>

                            </div>

                            <div>

                                <div class="default-text form-title">Expires</div>

                                <div id="active-session-expireDate" class="rounded-button active-session-entry centering-flex">

                                    <div class="default-text">@Expiration</div>

                                    <div class="flex-divider"></div>

                                </div>

                            </div>

                            <div>

                                <button id="active-session-end-button" class="rounded-button centering-flex active-session-entry" @onclick="EndSession">

                                    <div class="default-text" style="color: inherit">End Session</div>

                                </button>

                            </div>

                        </div>
                    </div>

                </div>

            }

        </div>

    </div>

}


@code {
    ApplicationDbContext dbContext;
    public static int counter = 0;

    public class addInstructorItem {

        public Action StateHasChangedDelegate { get; set; }
        public ApplicationUser user;
        public bool Selected { get; set; } = false;
        public string radioButton { get; set; } = "radio_button_unchecked";

        public addInstructorItem(ApplicationUser instructor) {
            user = instructor;
        }

        public void clicked(List<addInstructorItem> instructorElementList, List<addInstructorItem> instructorElementSelectedList) {

            if (Selected) {
                Selected = false;
                //instructorElementList.Add(this);
                instructorElementSelectedList.Remove(this);
                radioButton = "radio_button_unchecked";

            }
            else {
                Selected = true;
                //instructorElementList.Remove(this);
                instructorElementSelectedList.Add(this);
                radioButton = "radio_button_checked";

            }

            //StateHasChangedDelegate.Invoke();

        }

    }

    private ElementReference _sessionJoinCode; 
    public IList<ApplicationUser> instructorList { get; set; }
    public List<addInstructorItem> instructorElementList { get; set; } = new List<addInstructorItem>();
    public List<addInstructorItem> instructorElementSelectedList { get; set; } = new List<addInstructorItem>();

    Session session;

    int pageDisplay = 1;

    public string SessionName = "";

    public string PrimaryInstructor = "";
    public string Created = "";
    public string Expiration = "";
    public string JoinCode = "";
    public string Students = "";

    ApplicationUser currentUser;
    InstructorEntity primaryInstructorEntity;

    string instructorListString = "";

    protected override async Task OnInitializedAsync() {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Db Factory
        dbContext = await dbFactory.CreateDbContextAsync();

        currentUser = await userManager.FindByNameAsync(user.Identity.Name);

        addInstructorItem primInstructor = new addInstructorItem(currentUser);
        instructorElementSelectedList.Add(primInstructor);

        primaryInstructorEntity = await dbContext.Instructors.FirstOrDefaultAsync(i => i.UserId == currentUser.Id);

        await dbContext.SaveChangesAsync();

        instructorList = await userManager.GetUsersInRoleAsync("Instructor");

        foreach (var instructor in instructorList) {
            addInstructorItem item = new addInstructorItem(instructor);
            item.StateHasChangedDelegate = StateHasChanged;
            instructorElementList.Add(item);
        }

        SessionEntity sessionEnt = await dbContext.Sessions.FirstOrDefaultAsync(s => s.SessionId == primaryInstructorEntity.SessionId);

        if (sessionEnt != null && sessionEnt.Active) {

            session = new Session(sessionEnt);
            SessionName = sessionEnt.SessionName;
            PrimaryInstructor = currentUser.UserName;
            Created = sessionEnt.Created.ToString();
            Expiration = sessionEnt.Created.AddHours(8.0).ToString();
            JoinCode = sessionEnt.JoinCode;

        }


        await base.OnInitializedAsync();
    }

    // Copy session join code to clipbard 
    public async void CopySessionCode() {
       await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", _sessionJoinCode);
    }

    public async void CreateSession() {

        //Session(string SessionName, InstructorEntity PrimaryInstructor, string InstructorList)

        instructorListString = "";

        foreach (var selectedInstructor in instructorElementSelectedList) {

            if (selectedInstructor.user != currentUser) {

                instructorListString = instructorListString + selectedInstructor.user.Id + " ";

            }

        }

        session = new Session(SessionName, primaryInstructorEntity, instructorListString);
        JoinCode = session.sessionEntity.JoinCode;
        Created = session.sessionEntity.Created.ToString();
        Expiration = session.sessionEntity.Created.AddHours(8.0).ToString();

        primaryInstructorEntity.Session = session.sessionEntity;
        primaryInstructorEntity.SessionId = session.sessionEntity.SessionId;

        pageDisplay = 2;

        dbContext.SaveChanges();

        SessionInfo.SessionInfoList.Add(session.sessionEntity.SessionId.ToString(), new Dictionary<string, SessionTeam>());
        SessionInfo.HelpQueue.Add(session.sessionEntity.SessionId.ToString(), new List<TeamEntity>());

        //await session.ScheduledEndSession(dbContext);
        await SessionMethods.ScheduleSessionEnd(userManager, session);

    }

    public void EndSession() {

        session.EndSession(userManager);

        session = null;
        SessionName = "";
        PrimaryInstructor = "";
        Created = "";
        Expiration = "";
        JoinCode = "";
        Students = "";

        List<addInstructorItem> instructorElementSelectedListClone = new List<addInstructorItem>(instructorElementSelectedList);

        foreach (var element in instructorElementSelectedListClone) {

            if (element.user != currentUser) {
                element.clicked(instructorElementList, instructorElementSelectedList);
            }

        }

        pageDisplay = 1;

    }

    public async void ShowInstructorModal() {

        await JSRuntime.InvokeVoidAsync("AddInstructorShow");

    }

    public async void HideInstructorModal() {

        await JSRuntime.InvokeVoidAsync("AddInstructorHide");

    }


    public async void ShowStudentList() {

        await JSRuntime.InvokeVoidAsync("StudentListShow");

    }

    public async void HideStudentList() {

        await JSRuntime.InvokeVoidAsync("StudentListHide");

    }

    public async ValueTask DisposeAsync() {
        if (dbContext != null) {
            await dbContext.DisposeAsync();
        }
    }

    @*

        public async void CreateSession() {

            //secondaryInstructor = await userManager.FindByNameAsync(SecondaryInstructor);

            instructorList = primaryInstructor.InstructorId.ToString() + " " + primaryInstructor.InstructorId.ToString();

            Session session = new Session(SessionName, primaryInstructor, instructorList);
            dbContext.Sessions.Add(session.sessionEntity);
            dbContext.SaveChanges();

            primaryInstructor.SessionId = session.sessionEntity.SessionId;
            dbContext.SaveChanges();

            Console.WriteLine(session.sessionEntity.JoinCode);

            JoinCode = session.sessionEntity.JoinCode;

            Created = session.sessionEntity.Created.ToString();

            Expiration = session.sessionEntity.Created.AddHours(8.0).ToString();

            pageDisplay = 2;

            await session.ScheduledEndSession();

            Console.WriteLine("Didn't await");

        }

    *@

}




@*
    <!--

    if page = 1 then

        display session creator form
        session create button

    else if page = 2 then

        display session information




    -->

    <h1> Session Creator </h1>
    <h2> Primary Instructor: @PrimaryInstructor </h2>

    @if (pageDisplay == 1) {

        <!--<label for="secondaryInstructor"> Secondary Instructor:</label>
        <input type="text" id="secondaryInstructor" name="secondaryInstructor" @bind="SecondaryInstructor">-->

        <label for="sessionName">Session Name:</label>
        <input type="text" id="sessionName" name="sessionName" @bind="SessionName">

        <button @onclick="CreateSession"> Create Session </button>

    }
    else if (pageDisplay == 2) {

        <h2> Session Name: @SessionName </h2>
        <h2> Join Code: @JoinCode </h2>
        <h2> Created: @Created </h2>
        <h2> Expiration: @Expiration </h2>
        <h2> Students: @Students </h2>

    }

*@
