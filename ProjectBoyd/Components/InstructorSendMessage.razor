@using ProjectBoyd.Models.EntityModels
<!--Used to populate the message field for the students-->
@using ProjectBoyd.Models.ObjectModels

<div id="dashboard-send-message-modal" class="basic-modal-item active">

    <form id="dashboard-send-message-modal-form" name="send-message" class="centering-flex modal-form">
        <span class="absolute-button-container">
            <!-- collapse button -->
            <button id="student-assign-lab-team-info-modal-close" class="icon-button" style="height:40px;width:40px; margin-bottom:5px;" @onclick="HideSendMessage">
                <span class="material-icons" style="margin:auto;font-size:20px">close</span>
            </button>
        </span>

        <div class="default-text title">Send Message</div>

        <div></div>

        <div>
            <!-- MESSAGE INPUT FIELD -->
            <div class="default-text form-title">Message</div>

            <textarea id="dashboard-send-message-modal-message" placeholder="Message." name="message" type="text" normal required @bind="Message"></textarea>

            <div class="default-text form-error"></div>

        </div>

        <div>
            <!-- Select Teams  -->

            <div class="default-text centering-flex">

                <div class="dashboard-text bold">Select Team(s) to Message</div>

                <div class="flex-divider"></div>

                

                    <div class="class-dashboard-help-queue-item-buttons item-spacer-right">

                        <button type="button" class="icon-button" title="Select All">
                            <span class="material-icons">select_all</span>
                        </button>

                    </div>

            </div>

            <!-- STORE SELECTED VALUES IN THIS INPUT -->
            <input id="dashboard-assign-lab-modal-selected-teams" name="selectedTeams" type="hidden" required>

            <!-- WHEN A CHECK BOX IS SELECTED BY THE USER, CHANGE THE ICON TO 'check_box'-->

            <div class="rounded-visible-border form-list">
                @foreach(var team in TeamItemList)
                {
                    <div class="class-dashboard-help-queue-item centering-flex">

                        <div class="dashboard-text bold">@team.Team.TeamName</div>

                        <div class="flex-divider"></div>

                        <div class="class-dashboard-help-queue-item-buttons item-spacer-right">

                            <button type="button" class="icon-button" title="Select" @onclick="() => Selected(team)">
                                <span class="material-icons">@team.CheckMarkText</span>
                            </button>

                        </div>

                    </div>
                }

            </div>

            <div class="default-text form-error"></div>

        </div>

        <div>

            <input type="submit" id="create-lab-equipment-tool-create" value="Send Message" class="noselect rounded-button dashboard-form-next-button" @onclick="SendMessage">
            <div class="default-text form-error"></div>

        </div>

    </form>


</div>


@code {

    [Parameter]
    public EventCallback HideSendMessage { get; set; }
    // List of all the teams as a param
    [Parameter]
    public List<TeamEntity> TeamList { get; set; } = new List<TeamEntity>();
    [Parameter]
    public Dictionary<string, SessionTeam> SessionInfo { get; set; }

    // Binded to the text area
    public string Message { get; set; } = String.Empty;

    // Keeping track of which teams are selected
    List<SendMessageTeamItem> TeamItemList { get; set; } = new List<SendMessageTeamItem>();
    protected override void OnInitialized()
    {
        foreach(var team in TeamList)
        {
            SendMessageTeamItem temp = new SendMessageTeamItem();
            temp.Team = team;
            TeamItemList.Add(temp);
        }
        base.OnInitialized();
    }

    List<TeamEntity> SelectedTeams = new List<TeamEntity>();
    public void Selected(SendMessageTeamItem team)
    {
        if (SelectedTeams.Contains(team.Team))
        {
            // Unhighlight checkbox and remove from selected teams list
            team.CheckMarkText = "check_box_outline_blank";
            SelectedTeams.Remove(team.Team);
        }else
        {
            // Highlight checkbox and add to selected teams list
            team.CheckMarkText = "select_check_box";
            SelectedTeams.Add(team.Team);
        }
    }

    public async void SendMessage()
    {
        foreach(var team in SelectedTeams)
        {
            SessionInfo[team.TeamId.ToString()].Message = Message;            
        }
        await HideSendMessage.InvokeAsync();
    }

}