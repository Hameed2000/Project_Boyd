@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.AspNetCore.WebUtilities;
@using ProjectBoyd.Models;
@using ProjectBoyd.Data;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
@using ProjectBoyd.Models.EntityModels;
@using ProjectBoyd.Models.ObjectModels;
@using ProjectBoyd.Models.EntityModels.LabEntities;
@using Microsoft.AspNetCore.Identity;

@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject ApplicationDbContext dbContext
@*@inject IDbContextFactory<ApplicationDbContext> dbFactory
@implements IAsyncDisposable*@
@inject NavigationManager NavManager

<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Material+Icons+Outlined">


@if (sessionTeamInfo != null && sessionTeamInfo.Message.Length > 0) {

    <div id="student-modal-container" class="basic-modal-container active">

        <div id="student-instructor-message-modal" class="basic-modal-item active">

            <div class="modal-form active">

                <div class="default-text title">Message From Instructor</div>

                <div></div>

                <img id="student-instructor-message-modal-icon" class="avatar-icon" src="https://cdn-icons-png.flaticon.com/512/1177/1177568.png" style="width:80px;">

                <div id="student-instructor-message-modal-text" class="rounded-visible-border default-text form-list" style="text-align: left;">

                    @sessionTeamInfo.Message

                </div>

                <div></div>

                <div>

                    <button id="student-instructor-message-modal-text" class="rounded-button centering-flex" @onclick="CloseMessage" style="background-color: var(--accent-color);width:100%;">

                        <div class="default-text bold" style="color:white;">Close</div>

                    </button>

                </div>

            </div>

        </div>

    </div>

}




@code {
    //  ApplicationDbContext dbContext;
    ApplicationUser currentUser;
    TeamEntity team;
    SessionTeam sessionTeamInfo;

    public void logging(string loggedmessage) {
        System.Diagnostics.Trace.TraceError(loggedmessage);
    }
    string message;

    public async void StateHasChangedWrapper(Object? source, System.Timers.ElapsedEventArgs e) {
        await InvokeAsync(() => {
            StateHasChanged();
        });
        return;
    }

    protected override async Task OnInitializedAsync() {
        // Db Factory
        //dbContext = await dbFactory.CreateDbContextAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        message = "StudentMessage: authState: " + authState;
        logging(message);
        var user = authState.User;
        message = "user: " + user;
        logging(message);
        try {
            currentUser = await userManager.FindByNameAsync(user.Identity.Name);
            message = "StudentMessage: currentUser: " + currentUser + " User.Identity.Name " + user.Identity.Name;
            logging(message);
        }
        catch (Exception err) {
            message = "err: " + err;
            logging(message);
        }
        team = await dbContext.Teams.Where(t => t.AccountId == currentUser.Id).FirstOrDefaultAsync();
        message = "team: " + team;
        logging(message);

        try {
            sessionTeamInfo = SessionInfo.SessionInfoList.GetValueOrDefault(team.SessionId).GetValueOrDefault(team.TeamId.ToString());
            message = "StudentMessage: sessionID: " + team.SessionId + " TeamID: " + team.TeamId.ToString();
            logging(message);
            sessionTeamInfo.StateHasChangedDelegate = InvokeChange;
        }
        catch (Exception e) {
            message = "Exception Logged Error: " + e;
            logging(message);
        }

        // Checks for a message every 15 seconds
        System.Timers.Timer timer = new System.Timers.Timer();
        timer.Interval = 1000;
        timer.Elapsed += StateHasChangedWrapper;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    public void InvokeChange() {
        StateHasChanged();
    }

    // Navigate from here // multiple functions

    public void CloseMessage() {
        if (sessionTeamInfo.Message == "Congratulations! Your lab was approved.") {
            sessionTeamInfo.Message = "";
            NavManager.NavigateTo("/Student/StudentInstructions", true);
        }
        sessionTeamInfo.Message = "";
        //if(sessionTeamInfo.MessageAction != null)
        //{
        //    sessionTeamInfo.MessageAction.Invoke(sessionTeamInfo);
        //}

        StateHasChanged();
    }

    //public async ValueTask DisposeAsync() {
    //    if (dbContext != null) {
    //        await dbContext.DisposeAsync();
    //    }
    //}

}

